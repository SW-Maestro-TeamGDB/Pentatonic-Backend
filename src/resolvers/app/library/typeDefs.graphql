extend type Mutation {
    uploadCoverFile(input: UploadCoverFileInput!): URL

    uploadCover(input: UploadCoverInput!): Cover

    updateCover(input: UpdateCoverInput!): Cover

    deleteCover(input: DeleteCoverInput!): Boolean
}

extend type Query {
    getCover(coverId: ObjectID!): Cover

    queryCover(filter: QueryCoverInput!): [Cover!]
}

enum CoverFilter {
    ALL
    NAME
    SONG_ID
    POSITION
}

input QueryCoverInput {
    type: CoverFilter!
    content: String
    sort: SORT_OPTION! = DATE_DESC
}

input DeleteCoverIdInput {
    coverId: ObjectID!
}

input DeleteCoverInput {
    cover: DeleteCoverIdInput!
}

input UpdateCoverAllInput {
    coverId: ObjectID!
    name: String
    position: SESSION_TYPE
}

input UpdateCoverInput {
    cover: UpdateCoverAllInput!
}

input UploadCoverFileInput {
    file: Upload!
}

input UploadCoverAllInput {
    name: String!
    coverURI: URL!
    songId: ObjectID!
    position: SESSION_TYPE!
}

input UploadCoverInput {
    cover: UploadCoverAllInput!
    filter: UploadCoverFilterInput! = {
        syncDelay: 0.0
        echoDelay: 0.0
        echoDecays: 0.0
    }
}

input UploadCoverFilterInput {
    syncDelay: Float! = 0.0
    echoDelay: Float! = 0.0
    echoDecays: Float! = 0.0
}

type Cover {
    songId: ObjectID!
    coverBy: User!
    coverURI: URL!
    coverId: ObjectID!
    duration: Float!
    name: String!
    date: DateTime!
    position: SESSION_TYPE!
    song: Song!
}
